[solution 1]
public class Solution6 {

    public static void main(String[] args) throws IOException {

        int[] scores = {100,90,90,80,75,60};
        int[] alice = {50,65,77,90,102};

        TreeSet<Integer> set = new TreeSet<Integer>();

        for(int s: scores) {
            set.add(s);
        }

        NavigableSet<Integer> scores2 = set.descendingSet();

        int rank;
        int aliceLength = alice.length;
        int k = aliceLength-1;
        int z = scores2.size();
        int[] result = new int[aliceLength];

        for(int j=k;j >= 0;j--) {
            rank = 0;
            for(int st: scores2) {
                if(st <= alice[j]) {
                    result[j] = rank+1;
                    break;
                }
                rank++;
            }
            k--;
        }

        if(alice[0] < scores2.last()) {
            result[0] = z+1;
        }

        for(int r: result) {
            System.out.println(r);
        }

    }
}



[solution 2]
public class Solution {

    public static void main(String[] args) {

        // your code goes here
        int[] scores = {100,90,90,80,75,60};
        int[] alice = {50,65,77,90,102};
        int n = scores.length;
        int m = alice.length;

        int[] rank = new int[n];
        rank[0] = 1;
        for(int i=1;i<n;i++){
            if(scores[i] < scores[i-1]){
                rank[i] = rank[i-1] + 1;
            }else{
                rank[i] = rank[i-1];
            }
        }

        for(int r: rank) {
            System.out.println("---> "+r);
        }

        int start = 0,end = n-1;
        int ind;
        int[] result = new int[m];

        for(int i=0;i < m;i++){
            ind = binarySearch(scores, start, end, alice[i]);
            if(ind == -1){
                // 제일 작은 숫자
                System.out.println(rank[n-1]+1);
                result[i] = rank[n-1]+1;
            }else{
                end = ind;
                System.out.println(rank[ind]);
                result[i] = rank[ind];
            }
        }
    }

    static int binarySearch(int[] scores, int start, int end, int alice){
        if(alice < scores[end]) return -1;
        if(alice >= scores[start]) return 0;
        if(end-start <= 1) return end;
        int mid = (start+end)/2;
        if(scores[mid] < alice){
            return binarySearch(scores,start,mid,alice);
        }else if(scores[mid] == alice){
            return mid;
        }else{
            return binarySearch(scores,mid,end,alice);
        }
    }

}

[solution 3]
int rank = 1;
int idx1 = 0;
int idx2 = alice.length-1;

while(idx2 >= 0) {
    if(idx1 == scores.length || alice[idx2] >= scores[idx1]){
        alice[idx2] = rank;
        idx2--;
    }else{
        if(idx1 == 0 || scores[idx1] != scores[idx1-1])
            rank++;
        idx1++;
    }
}

return alice;